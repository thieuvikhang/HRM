#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HRM")]
	public partial class HRMModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbsent(Absent instance);
    partial void UpdateAbsent(Absent instance);
    partial void DeleteAbsent(Absent instance);
    partial void InsertAccess(Access instance);
    partial void UpdateAccess(Access instance);
    partial void DeleteAccess(Access instance);
    partial void InsertCateAge(CateAge instance);
    partial void UpdateCateAge(CateAge instance);
    partial void DeleteCateAge(CateAge instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertDaysRemain(DaysRemain instance);
    partial void UpdateDaysRemain(DaysRemain instance);
    partial void DeleteDaysRemain(DaysRemain instance);
    partial void InsertDetailAccess(DetailAccess instance);
    partial void UpdateDetailAccess(DetailAccess instance);
    partial void DeleteDetailAccess(DetailAccess instance);
    partial void InsertGroupAccess(GroupAccess instance);
    partial void UpdateGroupAccess(GroupAccess instance);
    partial void DeleteGroupAccess(GroupAccess instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertSalary(Salary instance);
    partial void UpdateSalary(Salary instance);
    partial void DeleteSalary(Salary instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertSocialInsurance(SocialInsurance instance);
    partial void UpdateSocialInsurance(SocialInsurance instance);
    partial void DeleteSocialInsurance(SocialInsurance instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    #endregion
		
		public HRMModelDataContext() : 
				base(global::DAL.Properties.Settings.Default.HRMConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HRMModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRMModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRMModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRMModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Absent> Absents
		{
			get
			{
				return this.GetTable<Absent>();
			}
		}
		
		public System.Data.Linq.Table<Access> Accesses
		{
			get
			{
				return this.GetTable<Access>();
			}
		}
		
		public System.Data.Linq.Table<CateAge> CateAges
		{
			get
			{
				return this.GetTable<CateAge>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<DaysRemain> DaysRemains
		{
			get
			{
				return this.GetTable<DaysRemain>();
			}
		}
		
		public System.Data.Linq.Table<DetailAccess> DetailAccesses
		{
			get
			{
				return this.GetTable<DetailAccess>();
			}
		}
		
		public System.Data.Linq.Table<GroupAccess> GroupAccesses
		{
			get
			{
				return this.GetTable<GroupAccess>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<Salary> Salaries
		{
			get
			{
				return this.GetTable<Salary>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<SocialInsurance> SocialInsurances
		{
			get
			{
				return this.GetTable<SocialInsurance>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Age_Range")]
		public int Age_Range()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.test")]
		public ISingleResult<testResult> test()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<testResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Sp_absent")]
		public ISingleResult<Sp_absentResult> Sp_absent()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Sp_absentResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Absent")]
	public partial class Absent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbsentID;
		
		private System.Nullable<int> _AbsentDay;
		
		private System.Nullable<System.DateTime> _FromDate;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private System.Nullable<bool> _AbsentType;
		
		private string _Note;
		
		private string _StaffID;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbsentIDChanging(int value);
    partial void OnAbsentIDChanged();
    partial void OnAbsentDayChanging(System.Nullable<int> value);
    partial void OnAbsentDayChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnAbsentTypeChanging(System.Nullable<bool> value);
    partial void OnAbsentTypeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    #endregion
		
		public Absent()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbsentID
		{
			get
			{
				return this._AbsentID;
			}
			set
			{
				if ((this._AbsentID != value))
				{
					this.OnAbsentIDChanging(value);
					this.SendPropertyChanging();
					this._AbsentID = value;
					this.SendPropertyChanged("AbsentID");
					this.OnAbsentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsentDay", DbType="Int")]
		public System.Nullable<int> AbsentDay
		{
			get
			{
				return this._AbsentDay;
			}
			set
			{
				if ((this._AbsentDay != value))
				{
					this.OnAbsentDayChanging(value);
					this.SendPropertyChanging();
					this._AbsentDay = value;
					this.SendPropertyChanged("AbsentDay");
					this.OnAbsentDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsentType", DbType="Bit")]
		public System.Nullable<bool> AbsentType
		{
			get
			{
				return this._AbsentType;
			}
			set
			{
				if ((this._AbsentType != value))
				{
					this.OnAbsentTypeChanging(value);
					this.SendPropertyChanging();
					this._AbsentType = value;
					this.SendPropertyChanged("AbsentType");
					this.OnAbsentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Absent", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Absents.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Absents.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Access")]
	public partial class Access : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessID;
		
		private string _Form;
		
		private System.Nullable<bool> _Edit;
		
		private string _DescriptionAccess;
		
		private EntitySet<DetailAccess> _DetailAccesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessIDChanging(int value);
    partial void OnAccessIDChanged();
    partial void OnFormChanging(string value);
    partial void OnFormChanged();
    partial void OnEditChanging(System.Nullable<bool> value);
    partial void OnEditChanged();
    partial void OnDescriptionAccessChanging(string value);
    partial void OnDescriptionAccessChanged();
    #endregion
		
		public Access()
		{
			this._DetailAccesses = new EntitySet<DetailAccess>(new Action<DetailAccess>(this.attach_DetailAccesses), new Action<DetailAccess>(this.detach_DetailAccesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessID
		{
			get
			{
				return this._AccessID;
			}
			set
			{
				if ((this._AccessID != value))
				{
					this.OnAccessIDChanging(value);
					this.SendPropertyChanging();
					this._AccessID = value;
					this.SendPropertyChanged("AccessID");
					this.OnAccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Form", DbType="NVarChar(20)")]
		public string Form
		{
			get
			{
				return this._Form;
			}
			set
			{
				if ((this._Form != value))
				{
					this.OnFormChanging(value);
					this.SendPropertyChanging();
					this._Form = value;
					this.SendPropertyChanged("Form");
					this.OnFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edit", DbType="Bit")]
		public System.Nullable<bool> Edit
		{
			get
			{
				return this._Edit;
			}
			set
			{
				if ((this._Edit != value))
				{
					this.OnEditChanging(value);
					this.SendPropertyChanging();
					this._Edit = value;
					this.SendPropertyChanged("Edit");
					this.OnEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAccess", DbType="NVarChar(50)")]
		public string DescriptionAccess
		{
			get
			{
				return this._DescriptionAccess;
			}
			set
			{
				if ((this._DescriptionAccess != value))
				{
					this.OnDescriptionAccessChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAccess = value;
					this.SendPropertyChanged("DescriptionAccess");
					this.OnDescriptionAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Access_DetailAccess", Storage="_DetailAccesses", ThisKey="AccessID", OtherKey="AccessID")]
		public EntitySet<DetailAccess> DetailAccesses
		{
			get
			{
				return this._DetailAccesses;
			}
			set
			{
				this._DetailAccesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailAccesses(DetailAccess entity)
		{
			this.SendPropertyChanging();
			entity.Access = this;
		}
		
		private void detach_DetailAccesses(DetailAccess entity)
		{
			this.SendPropertyChanging();
			entity.Access = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CateAge")]
	public partial class CateAge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _mount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmountChanging(System.Nullable<int> value);
    partial void OnmountChanged();
    #endregion
		
		public CateAge()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mount", DbType="Int")]
		public System.Nullable<int> mount
		{
			get
			{
				return this._mount;
			}
			set
			{
				if ((this._mount != value))
				{
					this.OnmountChanging(value);
					this.SendPropertyChanging();
					this._mount = value;
					this.SendPropertyChanged("mount");
					this.OnmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ContractID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Currency;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<decimal> _BasicPay;
		
		private string _Payment;
		
		private string _Note;
		
		private string _StaffID;
		
		private int _ContractTypeID;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(string value);
    partial void OnContractIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnBasicPayChanging(System.Nullable<decimal> value);
    partial void OnBasicPayChanged();
    partial void OnPaymentChanging(string value);
    partial void OnPaymentChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnContractTypeIDChanging(int value);
    partial void OnContractTypeIDChanged();
    #endregion
		
		public Contract()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(10)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicPay", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> BasicPay
		{
			get
			{
				return this._BasicPay;
			}
			set
			{
				if ((this._BasicPay != value))
				{
					this.OnBasicPayChanging(value);
					this.SendPropertyChanging();
					this._BasicPay = value;
					this.SendPropertyChanged("BasicPay");
					this.OnBasicPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="NVarChar(20)")]
		public string Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractTypeID", DbType="Int NOT NULL")]
		public int ContractTypeID
		{
			get
			{
				return this._ContractTypeID;
			}
			set
			{
				if ((this._ContractTypeID != value))
				{
					this.OnContractTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContractTypeID = value;
					this.SendPropertyChanged("ContractTypeID");
					this.OnContractTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Contract", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DaysRemain")]
	public partial class DaysRemain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DaysRemainID;
		
		private System.Nullable<int> _LeaveAYear;
		
		private System.Nullable<int> _UsedInYear;
		
		private System.Nullable<int> _Year;
		
		private string _StaffID;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDaysRemainIDChanging(int value);
    partial void OnDaysRemainIDChanged();
    partial void OnLeaveAYearChanging(System.Nullable<int> value);
    partial void OnLeaveAYearChanged();
    partial void OnUsedInYearChanging(System.Nullable<int> value);
    partial void OnUsedInYearChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    #endregion
		
		public DaysRemain()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysRemainID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DaysRemainID
		{
			get
			{
				return this._DaysRemainID;
			}
			set
			{
				if ((this._DaysRemainID != value))
				{
					this.OnDaysRemainIDChanging(value);
					this.SendPropertyChanging();
					this._DaysRemainID = value;
					this.SendPropertyChanged("DaysRemainID");
					this.OnDaysRemainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveAYear", DbType="Int")]
		public System.Nullable<int> LeaveAYear
		{
			get
			{
				return this._LeaveAYear;
			}
			set
			{
				if ((this._LeaveAYear != value))
				{
					this.OnLeaveAYearChanging(value);
					this.SendPropertyChanging();
					this._LeaveAYear = value;
					this.SendPropertyChanged("LeaveAYear");
					this.OnLeaveAYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsedInYear", DbType="Int")]
		public System.Nullable<int> UsedInYear
		{
			get
			{
				return this._UsedInYear;
			}
			set
			{
				if ((this._UsedInYear != value))
				{
					this.OnUsedInYearChanging(value);
					this.SendPropertyChanging();
					this._UsedInYear = value;
					this.SendPropertyChanged("UsedInYear");
					this.OnUsedInYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DaysRemain", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.DaysRemains.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.DaysRemains.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailAccess")]
	public partial class DetailAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessID;
		
		private int _GroupAccessID;
		
		private EntityRef<Access> _Access;
		
		private EntityRef<GroupAccess> _GroupAccess;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessIDChanging(int value);
    partial void OnAccessIDChanged();
    partial void OnGroupAccessIDChanging(int value);
    partial void OnGroupAccessIDChanged();
    #endregion
		
		public DetailAccess()
		{
			this._Access = default(EntityRef<Access>);
			this._GroupAccess = default(EntityRef<GroupAccess>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccessID
		{
			get
			{
				return this._AccessID;
			}
			set
			{
				if ((this._AccessID != value))
				{
					if (this._Access.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessIDChanging(value);
					this.SendPropertyChanging();
					this._AccessID = value;
					this.SendPropertyChanged("AccessID");
					this.OnAccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAccessID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupAccessID
		{
			get
			{
				return this._GroupAccessID;
			}
			set
			{
				if ((this._GroupAccessID != value))
				{
					if (this._GroupAccess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupAccessIDChanging(value);
					this.SendPropertyChanging();
					this._GroupAccessID = value;
					this.SendPropertyChanged("GroupAccessID");
					this.OnGroupAccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Access_DetailAccess", Storage="_Access", ThisKey="AccessID", OtherKey="AccessID", IsForeignKey=true)]
		public Access Access
		{
			get
			{
				return this._Access.Entity;
			}
			set
			{
				Access previousValue = this._Access.Entity;
				if (((previousValue != value) 
							|| (this._Access.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Access.Entity = null;
						previousValue.DetailAccesses.Remove(this);
					}
					this._Access.Entity = value;
					if ((value != null))
					{
						value.DetailAccesses.Add(this);
						this._AccessID = value.AccessID;
					}
					else
					{
						this._AccessID = default(int);
					}
					this.SendPropertyChanged("Access");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccess_DetailAccess", Storage="_GroupAccess", ThisKey="GroupAccessID", OtherKey="GroupAccessID", IsForeignKey=true)]
		public GroupAccess GroupAccess
		{
			get
			{
				return this._GroupAccess.Entity;
			}
			set
			{
				GroupAccess previousValue = this._GroupAccess.Entity;
				if (((previousValue != value) 
							|| (this._GroupAccess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupAccess.Entity = null;
						previousValue.DetailAccesses.Remove(this);
					}
					this._GroupAccess.Entity = value;
					if ((value != null))
					{
						value.DetailAccesses.Add(this);
						this._GroupAccessID = value.GroupAccessID;
					}
					else
					{
						this._GroupAccessID = default(int);
					}
					this.SendPropertyChanged("GroupAccess");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupAccess")]
	public partial class GroupAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupAccessID;
		
		private string _GroupAccessName;
		
		private string _Description;
		
		private EntitySet<DetailAccess> _DetailAccesses;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupAccessIDChanging(int value);
    partial void OnGroupAccessIDChanged();
    partial void OnGroupAccessNameChanging(string value);
    partial void OnGroupAccessNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GroupAccess()
		{
			this._DetailAccesses = new EntitySet<DetailAccess>(new Action<DetailAccess>(this.attach_DetailAccesses), new Action<DetailAccess>(this.detach_DetailAccesses));
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAccessID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupAccessID
		{
			get
			{
				return this._GroupAccessID;
			}
			set
			{
				if ((this._GroupAccessID != value))
				{
					this.OnGroupAccessIDChanging(value);
					this.SendPropertyChanging();
					this._GroupAccessID = value;
					this.SendPropertyChanged("GroupAccessID");
					this.OnGroupAccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAccessName", DbType="NVarChar(50)")]
		public string GroupAccessName
		{
			get
			{
				return this._GroupAccessName;
			}
			set
			{
				if ((this._GroupAccessName != value))
				{
					this.OnGroupAccessNameChanging(value);
					this.SendPropertyChanging();
					this._GroupAccessName = value;
					this.SendPropertyChanged("GroupAccessName");
					this.OnGroupAccessNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccess_DetailAccess", Storage="_DetailAccesses", ThisKey="GroupAccessID", OtherKey="GroupAccessID")]
		public EntitySet<DetailAccess> DetailAccesses
		{
			get
			{
				return this._DetailAccesses;
			}
			set
			{
				this._DetailAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccess_Account", Storage="_Accounts", ThisKey="GroupAccessID", OtherKey="GroupAccessID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailAccesses(DetailAccess entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccess = this;
		}
		
		private void detach_DetailAccesses(DetailAccess entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccess = null;
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccess = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.GroupAccess = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PostID;
		
		private string _PostName;
		
		private string _Description;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(string value);
    partial void OnPostIDChanged();
    partial void OnPostNameChanging(string value);
    partial void OnPostNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Position()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostName", DbType="NVarChar(20)")]
		public string PostName
		{
			get
			{
				return this._PostName;
			}
			set
			{
				if ((this._PostName != value))
				{
					this.OnPostNameChanging(value);
					this.SendPropertyChanging();
					this._PostName = value;
					this.SendPropertyChanged("PostName");
					this.OnPostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Staff", Storage="_Staffs", ThisKey="PostID", OtherKey="PostID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rule]")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleID;
		
		private System.Nullable<double> _SIPayRate;
		
		private System.Nullable<int> _LeaveAYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnSIPayRateChanging(System.Nullable<double> value);
    partial void OnSIPayRateChanged();
    partial void OnLeaveAYearChanging(System.Nullable<int> value);
    partial void OnLeaveAYearChanged();
    #endregion
		
		public Rule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIPayRate", DbType="Float")]
		public System.Nullable<double> SIPayRate
		{
			get
			{
				return this._SIPayRate;
			}
			set
			{
				if ((this._SIPayRate != value))
				{
					this.OnSIPayRateChanging(value);
					this.SendPropertyChanging();
					this._SIPayRate = value;
					this.SendPropertyChanged("SIPayRate");
					this.OnSIPayRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveAYear", DbType="Int")]
		public System.Nullable<int> LeaveAYear
		{
			get
			{
				return this._LeaveAYear;
			}
			set
			{
				if ((this._LeaveAYear != value))
				{
					this.OnLeaveAYearChanging(value);
					this.SendPropertyChanging();
					this._LeaveAYear = value;
					this.SendPropertyChanged("LeaveAYear");
					this.OnLeaveAYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salary")]
	public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryID;
		
		private System.Nullable<decimal> _BasicPay;
		
		private System.Nullable<System.DateTime> _SalaryMonth;
		
		private System.Nullable<int> _Workdays;
		
		private System.Nullable<decimal> _Allowance;
		
		private string _AllowanceDescription;
		
		private System.Nullable<int> _StandardWorkdays;
		
		private System.Nullable<decimal> _RealPay;
		
		private string _StaffID;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryIDChanging(int value);
    partial void OnSalaryIDChanged();
    partial void OnBasicPayChanging(System.Nullable<decimal> value);
    partial void OnBasicPayChanged();
    partial void OnSalaryMonthChanging(System.Nullable<System.DateTime> value);
    partial void OnSalaryMonthChanged();
    partial void OnWorkdaysChanging(System.Nullable<int> value);
    partial void OnWorkdaysChanged();
    partial void OnAllowanceChanging(System.Nullable<decimal> value);
    partial void OnAllowanceChanged();
    partial void OnAllowanceDescriptionChanging(string value);
    partial void OnAllowanceDescriptionChanged();
    partial void OnStandardWorkdaysChanging(System.Nullable<int> value);
    partial void OnStandardWorkdaysChanged();
    partial void OnRealPayChanging(System.Nullable<decimal> value);
    partial void OnRealPayChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    #endregion
		
		public Salary()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalaryID
		{
			get
			{
				return this._SalaryID;
			}
			set
			{
				if ((this._SalaryID != value))
				{
					this.OnSalaryIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryID = value;
					this.SendPropertyChanged("SalaryID");
					this.OnSalaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicPay", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> BasicPay
		{
			get
			{
				return this._BasicPay;
			}
			set
			{
				if ((this._BasicPay != value))
				{
					this.OnBasicPayChanging(value);
					this.SendPropertyChanging();
					this._BasicPay = value;
					this.SendPropertyChanged("BasicPay");
					this.OnBasicPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryMonth", DbType="DateTime")]
		public System.Nullable<System.DateTime> SalaryMonth
		{
			get
			{
				return this._SalaryMonth;
			}
			set
			{
				if ((this._SalaryMonth != value))
				{
					this.OnSalaryMonthChanging(value);
					this.SendPropertyChanging();
					this._SalaryMonth = value;
					this.SendPropertyChanged("SalaryMonth");
					this.OnSalaryMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Workdays", DbType="Int")]
		public System.Nullable<int> Workdays
		{
			get
			{
				return this._Workdays;
			}
			set
			{
				if ((this._Workdays != value))
				{
					this.OnWorkdaysChanging(value);
					this.SendPropertyChanging();
					this._Workdays = value;
					this.SendPropertyChanged("Workdays");
					this.OnWorkdaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allowance", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> Allowance
		{
			get
			{
				return this._Allowance;
			}
			set
			{
				if ((this._Allowance != value))
				{
					this.OnAllowanceChanging(value);
					this.SendPropertyChanging();
					this._Allowance = value;
					this.SendPropertyChanged("Allowance");
					this.OnAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceDescription", DbType="NVarChar(50)")]
		public string AllowanceDescription
		{
			get
			{
				return this._AllowanceDescription;
			}
			set
			{
				if ((this._AllowanceDescription != value))
				{
					this.OnAllowanceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AllowanceDescription = value;
					this.SendPropertyChanged("AllowanceDescription");
					this.OnAllowanceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardWorkdays", DbType="Int")]
		public System.Nullable<int> StandardWorkdays
		{
			get
			{
				return this._StandardWorkdays;
			}
			set
			{
				if ((this._StandardWorkdays != value))
				{
					this.OnStandardWorkdaysChanging(value);
					this.SendPropertyChanging();
					this._StandardWorkdays = value;
					this.SendPropertyChanged("StandardWorkdays");
					this.OnStandardWorkdaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealPay", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> RealPay
		{
			get
			{
				return this._RealPay;
			}
			set
			{
				if ((this._RealPay != value))
				{
					this.OnRealPayChanging(value);
					this.SendPropertyChanging();
					this._RealPay = value;
					this.SendPropertyChanged("RealPay");
					this.OnRealPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Salary", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Salaries.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Salaries.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SectionID;
		
		private string _SectionName;
		
		private string _Description;
		
		private System.Nullable<int> _StandardWorkdays;
		
		private string _Phone;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIDChanging(string value);
    partial void OnSectionIDChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStandardWorkdaysChanging(System.Nullable<int> value);
    partial void OnStandardWorkdaysChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Section()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionName", DbType="NVarChar(20)")]
		public string SectionName
		{
			get
			{
				return this._SectionName;
			}
			set
			{
				if ((this._SectionName != value))
				{
					this.OnSectionNameChanging(value);
					this.SendPropertyChanging();
					this._SectionName = value;
					this.SendPropertyChanged("SectionName");
					this.OnSectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardWorkdays", DbType="Int")]
		public System.Nullable<int> StandardWorkdays
		{
			get
			{
				return this._StandardWorkdays;
			}
			set
			{
				if ((this._StandardWorkdays != value))
				{
					this.OnStandardWorkdaysChanging(value);
					this.SendPropertyChanging();
					this._StandardWorkdays = value;
					this.SendPropertyChanged("StandardWorkdays");
					this.OnStandardWorkdaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Staff", Storage="_Staffs", ThisKey="SectionID", OtherKey="SectionID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SocialInsurance")]
	public partial class SocialInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _InsuranceID;
		
		private System.Nullable<System.DateTime> _SIStartDate;
		
		private System.Nullable<double> _PayRate;
		
		private System.Nullable<decimal> _Price;
		
		private string _Payment;
		
		private string _StaffID;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceIDChanging(string value);
    partial void OnInsuranceIDChanged();
    partial void OnSIStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSIStartDateChanged();
    partial void OnPayRateChanging(System.Nullable<double> value);
    partial void OnPayRateChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnPaymentChanging(string value);
    partial void OnPaymentChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    #endregion
		
		public SocialInsurance()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SIStartDate
		{
			get
			{
				return this._SIStartDate;
			}
			set
			{
				if ((this._SIStartDate != value))
				{
					this.OnSIStartDateChanging(value);
					this.SendPropertyChanging();
					this._SIStartDate = value;
					this.SendPropertyChanged("SIStartDate");
					this.OnSIStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayRate", DbType="Float")]
		public System.Nullable<double> PayRate
		{
			get
			{
				return this._PayRate;
			}
			set
			{
				if ((this._PayRate != value))
				{
					this.OnPayRateChanging(value);
					this.SendPropertyChanging();
					this._PayRate = value;
					this.SendPropertyChanged("PayRate");
					this.OnPayRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="NVarChar(50)")]
		public string Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SocialInsurance", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.SocialInsurances.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.SocialInsurances.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccID;
		
		private string _UserName;
		
		private string _Password;
		
		private int _GroupAccessID;
		
		private string _StaffID;
		
		private bool _AccountStatusOnline;
		
		private EntityRef<GroupAccess> _GroupAccess;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGroupAccessIDChanging(int value);
    partial void OnGroupAccessIDChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnAccountStatusOnlineChanging(bool value);
    partial void OnAccountStatusOnlineChanged();
    #endregion
		
		public Account()
		{
			this._GroupAccess = default(EntityRef<GroupAccess>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="Char(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Char(33)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAccessID", DbType="Int NOT NULL")]
		public int GroupAccessID
		{
			get
			{
				return this._GroupAccessID;
			}
			set
			{
				if ((this._GroupAccessID != value))
				{
					if (this._GroupAccess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupAccessIDChanging(value);
					this.SendPropertyChanging();
					this._GroupAccessID = value;
					this.SendPropertyChanged("GroupAccessID");
					this.OnGroupAccessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountStatusOnline", DbType="Bit NOT NULL")]
		public bool AccountStatusOnline
		{
			get
			{
				return this._AccountStatusOnline;
			}
			set
			{
				if ((this._AccountStatusOnline != value))
				{
					this.OnAccountStatusOnlineChanging(value);
					this.SendPropertyChanging();
					this._AccountStatusOnline = value;
					this.SendPropertyChanged("AccountStatusOnline");
					this.OnAccountStatusOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupAccess_Account", Storage="_GroupAccess", ThisKey="GroupAccessID", OtherKey="GroupAccessID", IsForeignKey=true)]
		public GroupAccess GroupAccess
		{
			get
			{
				return this._GroupAccess.Entity;
			}
			set
			{
				GroupAccess previousValue = this._GroupAccess.Entity;
				if (((previousValue != value) 
							|| (this._GroupAccess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupAccess.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._GroupAccess.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._GroupAccessID = value.GroupAccessID;
					}
					else
					{
						this._GroupAccessID = default(int);
					}
					this.SendPropertyChanged("GroupAccess");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _StaffName;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<System.DateTime> _BirthDay;
		
		private string _CardID;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Education;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _ManagerID;
		
		private string _Email;
		
		private System.Nullable<int> _DaysRemain;
		
		private string _PostID;
		
		private string _SectionID;
		
		private EntitySet<Absent> _Absents;
		
		private EntitySet<Contract> _Contracts;
		
		private EntitySet<DaysRemain> _DaysRemains;
		
		private EntitySet<Salary> _Salaries;
		
		private EntitySet<SocialInsurance> _SocialInsurances;
		
		private EntitySet<Account> _Accounts;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnCardIDChanging(string value);
    partial void OnCardIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEducationChanging(string value);
    partial void OnEducationChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnManagerIDChanging(string value);
    partial void OnManagerIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDaysRemainChanging(System.Nullable<int> value);
    partial void OnDaysRemainChanged();
    partial void OnPostIDChanging(string value);
    partial void OnPostIDChanged();
    partial void OnSectionIDChanging(string value);
    partial void OnSectionIDChanged();
    #endregion
		
		public Staff()
		{
			this._Absents = new EntitySet<Absent>(new Action<Absent>(this.attach_Absents), new Action<Absent>(this.detach_Absents));
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._DaysRemains = new EntitySet<DaysRemain>(new Action<DaysRemain>(this.attach_DaysRemains), new Action<DaysRemain>(this.detach_DaysRemains));
			this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
			this._SocialInsurances = new EntitySet<SocialInsurance>(new Action<SocialInsurance>(this.attach_SocialInsurances), new Action<SocialInsurance>(this.detach_SocialInsurances));
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Position = default(EntityRef<Position>);
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="NVarChar(30)")]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", DbType="VarChar(12)")]
		public string CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="NVarChar(30)")]
		public string Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Char(6)")]
		public string ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysRemain", DbType="Int")]
		public System.Nullable<int> DaysRemain
		{
			get
			{
				return this._DaysRemain;
			}
			set
			{
				if ((this._DaysRemain != value))
				{
					this.OnDaysRemainChanging(value);
					this.SendPropertyChanging();
					this._DaysRemain = value;
					this.SendPropertyChanged("DaysRemain");
					this.OnDaysRemainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Absent", Storage="_Absents", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Absent> Absents
		{
			get
			{
				return this._Absents;
			}
			set
			{
				this._Absents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Contract", Storage="_Contracts", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DaysRemain", Storage="_DaysRemains", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<DaysRemain> DaysRemains
		{
			get
			{
				return this._DaysRemains;
			}
			set
			{
				this._DaysRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Salary", Storage="_Salaries", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Salary> Salaries
		{
			get
			{
				return this._Salaries;
			}
			set
			{
				this._Salaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SocialInsurance", Storage="_SocialInsurances", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<SocialInsurance> SocialInsurances
		{
			get
			{
				return this._SocialInsurances;
			}
			set
			{
				this._SocialInsurances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Accounts", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Staff", Storage="_Position", ThisKey="PostID", OtherKey="PostID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._PostID = value.PostID;
					}
					else
					{
						this._PostID = default(string);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Staff", Storage="_Section", ThisKey="SectionID", OtherKey="SectionID", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._SectionID = value.SectionID;
					}
					else
					{
						this._SectionID = default(string);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Absents(Absent entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Absents(Absent entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_DaysRemains(DaysRemain entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_DaysRemains(DaysRemain entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Salaries(Salary entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Salaries(Salary entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_SocialInsurances(SocialInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_SocialInsurances(SocialInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	public partial class testResult
	{
		
		private System.Nullable<int> ___40;
		
		private System.Nullable<int> ___20;
		
		public testResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[< 40]", Storage="___40", DbType="Int")]
		public System.Nullable<int> @__40
		{
			get
			{
				return this.___40;
			}
			set
			{
				if ((this.___40 != value))
				{
					this.___40 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[< 20]", Storage="___20", DbType="Int")]
		public System.Nullable<int> @__20
		{
			get
			{
				return this.___20;
			}
			set
			{
				if ((this.___20 != value))
				{
					this.___20 = value;
				}
			}
		}
	}
	
	public partial class Sp_absentResult
	{
		
		private System.Nullable<bool> _AbsentType;
		
		private string _Name;
		
		public Sp_absentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsentType", DbType="Bit")]
		public System.Nullable<bool> AbsentType
		{
			get
			{
				return this._AbsentType;
			}
			set
			{
				if ((this._AbsentType != value))
				{
					this._AbsentType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(14) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
